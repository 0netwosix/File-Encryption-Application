/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.Formatter;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Dell
 */
public class Application extends javax.swing.JFrame {

   
    
    public Application(){     
        
        initComponents();
        setLocationRelativeTo(null);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fileLocation = new javax.swing.JTextField();
        jBSelect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        outputFile = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jBEncrypt = new javax.swing.JButton();
        jBDecrypt = new javax.swing.JButton();
        jBClear = new javax.swing.JButton();
        keyB = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jBLog = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Encryptor By NUCH");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jBSelect.setText("Select File");
        jBSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSelectActionPerformed(evt);
            }
        });

        jLabel1.setText("Select the File:");

        jLabel2.setText("Output Filename (with or without file extension):");

        jBEncrypt.setText("Encrypt");
        jBEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEncryptActionPerformed(evt);
            }
        });

        jBDecrypt.setText("Decrypt");
        jBDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDecryptActionPerformed(evt);
            }
        });

        jBClear.setText("Clear All");
        jBClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBClearActionPerformed(evt);
            }
        });

        jLabel3.setText("Insert the key (to decrypt):");

        jSeparator1.setBackground(new java.awt.Color(153, 153, 153));
        jSeparator1.setOpaque(true);

        jBLog.setText(" Log File");
        jBLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fileLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBClear, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(jBSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(keyB, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputFile, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                            .addComponent(jBEncrypt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBDecrypt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jBLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(53, Short.MAX_VALUE))
            .addComponent(jSeparator1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBSelect))
                .addGap(18, 18, 18)
                .addComponent(jBClear)
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBEncrypt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keyB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBDecrypt)
                    .addComponent(jBLog))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSelectActionPerformed
        //selecting the file
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        fileLocation.setText(f.getAbsolutePath());
    }//GEN-LAST:event_jBSelectActionPerformed

    private void jBEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEncryptActionPerformed
       if(!fileLocation.getText().isEmpty()){
           if(!outputFile.getText().isEmpty()){
                String out = outputFile.getText();
                String path = "Encrypted\\"+out;

                try {
                    //get the file to encrypt and set the output
                    FileInputStream fileIn = new FileInputStream(fileLocation.getText());
                    FileOutputStream fileOut = new FileOutputStream(path);

                    //generating the key
                    KeyGenerator gen = KeyGenerator.getInstance("AES");
                    gen.init(128); 
                    SecretKey secret = gen.generateKey();
                    byte[] k = secret.getEncoded();
                    String text = Base64.getEncoder().encodeToString(k);

                    SecretKeySpec key = new SecretKeySpec(k, "AES");

                    Cipher enc = Cipher.getInstance("AES");
                    enc.init(Cipher.ENCRYPT_MODE, key);
                    CipherOutputStream cos = new CipherOutputStream(fileOut, enc);

                    byte[] buf = new byte[1024];
                    int read;
                    while((read=fileIn.read(buf))!=-1){
                        cos.write(buf,0,read);
                    }
                    fileIn.close();
                    fileOut.flush();
                    cos.close();

                    JOptionPane.showMessageDialog(null, "Encryption Successfull!");

                    //Writing to log file           
                    FileWriter fw = new FileWriter("log.txt",true);
                    PrintWriter pw = new PrintWriter(fw);

                    pw.println("\n"+out+"\t"+text);
                    pw.close();

                } 
                catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
               
           }
           else{
               JOptionPane.showMessageDialog(null, "Set the output filename!");
           }
       }
       else{
           JOptionPane.showMessageDialog(null, "File is not selected!");
       }
    }//GEN-LAST:event_jBEncryptActionPerformed

    private void jBDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDecryptActionPerformed
        if(!fileLocation.getText().isEmpty()){
            if(!outputFile.getText().isEmpty()){
                if(!keyB.getText().isEmpty()){
                    String out = outputFile.getText();
                    String keyBox = keyB.getText();
                    String path = "Decrypted\\"+out;

                    try {
                        //get the file to encrypt and set the output
                        FileInputStream fileIn = new FileInputStream(fileLocation.getText());
                        FileOutputStream fileOut = new FileOutputStream(path);

                        byte k[]= Base64.getDecoder().decode(keyBox);
                        SecretKeySpec key = new SecretKeySpec(k, "AES");

                        Cipher dec = Cipher.getInstance("AES");
                        dec.init(Cipher.DECRYPT_MODE, key);
                        CipherOutputStream cos = new CipherOutputStream(fileOut, dec);

                        byte[] buf = new byte[1024];
                        int read;
                        while((read=fileIn.read(buf))!=-1){
                            cos.write(buf,0,read);
                        }
                        fileIn.close();
                        fileOut.flush();
                        cos.close();

                        JOptionPane.showMessageDialog(null, "Decryption Successfull!");
                    } 
                    catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                    }
                    
                }
                else{
                    JOptionPane.showMessageDialog(null, "No key inserted!");
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Set the output filename!");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "File is not selected!");
        }
    }//GEN-LAST:event_jBDecryptActionPerformed

    private void jBClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBClearActionPerformed
        fileLocation.setText(null);
        outputFile.setText(null);
        keyB.setText(null);
    }//GEN-LAST:event_jBClearActionPerformed

    private void jBLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLogActionPerformed
        try {
            openLog();
        } 
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jBLogActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application().setVisible(true);
            }
        });
    }
    
    //Method to open the log.txt file 
    public void openLog()throws Exception {
        Runtime rt = Runtime.getRuntime();
        
        String file = "log.txt";
        
        Process p = rt.exec("notepad "+file);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fileLocation;
    private javax.swing.JButton jBClear;
    private javax.swing.JButton jBDecrypt;
    private javax.swing.JButton jBEncrypt;
    private javax.swing.JButton jBLog;
    private javax.swing.JButton jBSelect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField keyB;
    private javax.swing.JTextField outputFile;
    // End of variables declaration//GEN-END:variables
}
